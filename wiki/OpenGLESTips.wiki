#summary OpenGL ES 2.0, Pepper & Native Client

= Introduction =

OpenGL ES 2.0 is a modern subset of normal OpenGL commonly available on desktop machines.  OpenGL ES discards deprecated portions of the orginal OpenGL API.  It also supports a smaller set of texture and vertex formats.  

  -----------
  Note: This document is a work-in-progress
  -----------

= Performance Notes =

Following are some tips and notes on OpenGL ES 2.0 and performance:

  * Use server-side VBOs for both vertex data _and_ index data (whenever possible).  Avoid client-side vertex anbd index data, except for low usage, one-off cases.

 * Make sure GPU compositing is on.  (note: may need to use command-line option --enable-accelerated-compositing when launching Chrome.)  To verify, go to this page: http://webkit.org/blog-files/3d-transforms/morphing-cubes.html  If you see a spinning cube in a cube it's on. If you see a spinning plane it's off.

  * Updating indices is slow because range checking needs to be done during validation.

  * Updating VBOs using glBufferData() is slower than using glSubBufferData().  There is a custom extension called glMapBufferSubData() for use when updating VBOs (for example, CPU skinning).

  * Updating textures dynamically is slow.  Using glTexImage2D() is slower than using glTexSubImage2D() because a new texture is allocated. There is a custom extension called glMapTexSubImage2D() for use when updating textures frequently.

  * Any commands that read data back to the client is extremely slow. These commands include all glGet commands and glReadPixels().  

  * Fix any warnings reported in the console.

= Porting Notes = 

Some of the more notable differences between OpenGL on desktop machines and OpenGL ES 2.0 are:

  * GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_FLOAT, GL_FIXED data types (extensions may be available for GL_HALF_FLOAT_OES, and GL_INT & GL_UNSIGNED_INT)

  * The following texture formats are supported: GL_RGB, GL_RGBA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_ALPHA

  * The following pixel data types are supported: GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_5_6_5

  * Support for compressed textures is supported using glCompressedTexImage2D().

  * There is no support for glTexImage1D(), glTexImage3D(), glTexRect().  However, an extension may be available for 3D texture support.

  * Cube maps are supported using glTexImage2D() and GL_TEXTURE_CUBE_MAP_x targets.

  * There is no support for fixed function pipeline.  All OpenGL ES 2.0 rendering requires vertex and pixel shaders.

  * There is no support for glBegin() and glEnd().  

  * There is no support for glColor(), glNormal(), glVertex(), and glTexCoord().

  * There is no support for desktop OpenGL's matrix stack (glMatrixMode(), glLoadIdentity(), glTranslatef(), glScalef(), glRotatef(), glPushMatrix(), and friends are not available).

  * Fragment shaders should specify a default precision such as "precision highp float;" otherwise they risk rendering undefined pixels.

  * Undefined pixels will be rendered as black pixels.

  * Vertex shaders cannot use ftransform().

  * These functions are not available: glNormalPointer(), glVertexPointer(), glColorPointer(), glTexCoordPointer(). Use the more generic glVertexAttribPointer() instead of these functions.