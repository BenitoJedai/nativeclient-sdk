#summary OpenGL ES 2.0, Pepper & Native Client

= Introduction =

This page discusses tips and techniques using OpenGL ES 2.0 under Pepper & Native Client.  _Currently work in progress_.


= Details =

*Performance Tips*

- Use server side VBOs whenever possible.  Avoid client side vertex & index data, except for low usage, one-off cases.

- Updating indices is slow, as range checking needs to be done during validation.

- Updating VBOs, same thing. glBufferData() is slower than glSubBufferData() and if you're really doing a lot of VBO work (CPU skinning) then we also have a custom extension glMapBufferSubData()

- Updating textures dynamically is slow.  glTexImage2D() is slower than glTexSubImage2D() because a new texture is allocated. If you're updating textures a lot we have a custom extension, glMapTexSubImage2D() you should be able to use.

- Any command that reads data back to the client is extremely slow. glGetError(), glGetUniform(), glReadPixels(), glGet anything.

- Make sure GPU compositing is on.  (You may need to use command line option --enable-accelerated-compositing when launching Chrome.)  You can verify it's on by going to this page http://webkit.org/blog-files/3d-transforms/morphing-cubes.html

* Porting Tips *

OpenGL ES 2.0 is a subset of normal OpenGL commonly available on desktop machines.  For the most part, OpenGL ES 2.0 is a modern subset, and discards deprecated portions of the orginal OpenGL API.  It also supports a smaller set of texture and vertex formats.  Some of the more notable differences of OpenGL ES 2.0 are:

- GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_FLOAT, GL_FIXED data types (extensions may be available for GL_HALF_FLOAT_OES, and GL_INT & GL_UNSIGNED_INT)

- Limited texture formats are supported: GL_RGB, GL_RGBA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_ALPHA

- Limited pixel data types: GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_5_6_5

- Support for compressed textures via glCompressedTexImage2D()

- No support for glTexImage1D(), glTexImage3D(), glTexRect().  (an extension may be available for 3D texture support)

- Cube maps are supported via glTexImage2D() and GL_TEXTURE_CUBE_MAP_x targets.

- No support for fixed function pipeline.  All OpenGL ES 2.0 rendering requires vertex and pixel shaders.

- No support for glBegin() / glEnd() or glColor(), glNormal(), glVertex(), or glTexCoord().

- No support for desktop OpenGL's matrix strack (glMatrixMode(), glLoadIdentity(), glTranslatef(), glScalef(), glRotatef(), glPushMatrix(), and friends are not available)

- Fragment shaders should specify a default precision such as "precision highp float;" or else they risk rendering "undefined" pixels (which show up as black pixels in OpenGL ES 2.0)

- Vertex shaders cannot use ftransform()

- glNormalPointer(), glVertexPointer(), glColorPointer(), glTexCoordPointer() functions are not available, use the more generic glVertexAttribPointer() instead. 