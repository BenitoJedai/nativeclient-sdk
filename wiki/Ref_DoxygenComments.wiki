#summary Documenting Classes using Doxygen-style comments.

= Documenting Classes using Doxygen-style comments =

Last updated: 2010-10-23
Authors: Jon Dormady, Matt Ball

== Overview ==

The number of technical writers on a project is often far fewer than the number of developers, resulting in far more code produced than can be reasonably documented by the writers. One solution to this problem is to have those who are most intimate with the code (the developers), create rough documentation directly in the code in the form of Doxygen comments. These comments are then massaged by the writers (directly in the source code comments) and extracted using the Doxygen tool to produce HTML reference documents for our customers.  This output is then uploaded to the `code.google.com` website for developers to browse.

This document is broken into two sections: Section 1 outlines the basics of using Doxygen-style comments in your code and section 2 outlines the preferred method of documenting code for `code.google.com`.

Additionally, this document contains conventions for both C and C++ code.  In general, C comments use `/** */`, and C++ use `///`.

== Section 1: Doxygen-Style Commenting ==

The Doxygen web site has complete instructions on the proper syntax for documenting code. Refer to [http://www.stack.nl/~dimitri/doxygen/manual.html] for further information (the section titled “[Ref_DoxygenComments#Wiki-style_markup Documenting the code]” covers the various conventions you can use to document your code). Following is a list of conventions that we (the Technical Writers) prefer you use for the Native Client SDK code:

=== Block Comments ===

C++ style Doxygen comments (three forward slashes) are encouraged for large comment blocks, such as detailed descriptions for classes or methods: 

{{{
/// My block of comments
///
/// More comments 
}}}

Use a blank comment line (containing only `///`) to tell Doxygen to insert a paragraph break when rendering the text in html.

In C this looks like:

{{{
/**
 * My block of comments
 *
 * More comments
 */
}}}

=== Single-line Comments ===

C++ comments are also encouraged for single-line comments.  Doxygen will automatically use all of the text up to the period as a short description (so, don’t forget the period). 

{{{
/// The C++ interface to the Pepper API. 
}}}

In C, this looks like:

{{{
/** The C++ interface to the Pepper API. */
}}}

=== Grouping ===

You can use the `//@{` and `//@}` mechanism for grouping related methods together within the Public Member Functions section that appears at the top of each class documentation. For example:

{{{
// @{
/// @name PPP_Instance methods for the plugin to override: 

/// See PPP_Instance.DidChangeView. 
virtual void DidChangeView(const Rect& position, const Rect& clip);

/// See PPP_Instance.DidChangeFocus. 
virtual void DidChangeFocus(bool has_focus);
// @}
}}}

In C this looks like:

{{{
// @{
/** @name PPP_Instance methods for the plugin to override: */

/** See PPP_Instance.DidChangeView. */
virtual void DidChangeView(const Rect& position, const Rect& clip);

/** See PPP_Instance.DidChangeFocus. */
virtual void DidChangeFocus(bool has_focus);
// @}
}}}

Note that there are only two slashes instead of three slashes before the `@{` and `@}`.

=== Class and File Documentation ===

To document a member of a C++ class, you must also document the class itself. The same holds for namespaces. To document a global C function, typedef, enum or preprocessor definition you must first document the file that contains it (usually this will be a header file, because that file contains the information that is exported to other source files).

Let's repeat that, because it is often overlooked: to document global objects (functions, typedefs, enum, macros, etc), you must document the file in which they are defined. In other words, there must at least be a `// @file`  in the file (C++) or `/** @file */` in the file (C).  See [[#Documenting_the_File Documenting the File]].

Comments usually appear directly before the class declaration, function definition/declaration, argument, and so on.  If the comment does not appear directly in front of the item that it documents, then it is necessary to use additional markup to link back to the item that is receiving the documentation.  This mechanism should rarely be used, if ever.

=== Documentation for Arguments ===

Comments for arguments can be to the right of the argument. Use the a `<` if you put a comment on the same line as what it describes:

{{{
/// PENDING: description of NaClImcMsgIoVec
struct NaClImcMsgIoVec {
  void    *base; ///< description of base
  size_t  length; ///< description of length
};
}}}

In C this looks like:

{{{
void    *base; /**< description of base */
}}}

=== Implementation Comments ===

Comments inside a function are ignored and considered implementation comments.  These comments should follow standard commenting guidelines according to the Google coding style.

=== API Groups ===

Doxygen lets you group APIs using [http://www.stack.nl/~dimitri/doxygen/grouping.html *group tags]. In the resulting HTML, it organizes the results under a tab called "Modules". For example, the Pepper API currently has two top-level groups: C and C++. Specify what APIs belong to what groups in the `@file` section at the beginning of a file.  See [[Documenting_the_File Documenting the File]].

== Section 2: Documenting Code for code.google.com ==


Every .h file containing classes, methods, and parameters that developers will use should be documented with Doxygen-style comments. These comments are extracted by the Doxygen tool to create HTML reference documentation. The resulting HTML is run through a series of scripts to create the proper formatted files for inclusion on code.google.com. The O3D reference documentation is a good example of a complete API reference document: [http://code.google.com/apis/o3d/docs/api_reference.html]

=== Documenting the File ===

File documentation goes in the first comment block at the top of a file (not later).  Every source file must have an `@file` section. You can also use `@addtogroup` within the file section to group the APIs within a module:

{{{
/// @file
/// Defines pthread API available for Native Client modules.
///
/// @addtogroup pthread
// @{
}}}

... contents of header file ...

{{{
// @}
/// End addtogroup pthread
}}}

In C this looks like:

{{{
/**
 * @file
 * Defines pthread API available for Native Client modules.
 *
 * @addtogroup pthread
 * @{
 */
}}}

... contents of header file ...

{{{
/**
 * @}
 * End addtogroup pthread
 */
}}}

=== Documenting the Class ===

A detailed description outlining the purpose and use of the class should appear right before the class declaration (no white space). For example, the O3D client class has this detailed description: 

{{{
/// The Client class is the main point of entry to O3D. It defines 
/// methods for creating and deleting * packs. Each new object 
/// created by the Client is assigned a unique ID. The Client has a /// root transform for the transform graph and a root render node for /// the render graph. 
class Client {
...
}
}}}

Note: The class description should not be merged into the File description block.
Documenting the Functions/Methods

Here is a C++ example of the Init method that is part of the Instance class reference:

{{{
 /// Initializes this plugin with the given arguments.
 /// @param[in]     argc The argument count.
 /// @param[in,out] argv The argument values (changed after parsing).
 /// @param[out]    outv The output string values.
 /// @return True on success. Returning false causes the plugin
 /// instance to be deleted and no other functions to be called.
virtual bool Init(uint32_t argc, char* argv[], char* outv[]);
}}}

Every method should have a brief description of what it does at the beginning of the comment block directly before the method declaration (Initializes this plugin with the given arguments). 

All arguments to the method should be listed using the `@param` tag with either `[in]`, `[out]`, or `[in,out]`, followed by the parameter name (`argc`) and a description of the parameter (`The argument count`).

All return values should be listed using the `@return` tag, followed by the return value(s) (`True on success...`) and an explanation of the values.  Obvious values may be omitted.  For example, for a boolean output, you might put `@return true on success`, and not mention false if it means the opposite.

Function documentation appearing before the declaration (i.e., in the header file) take precedence over comments before the definition (i.e., in the .c or .cc file).

=== Cross-referencing ===

You can refer to other classes or methods by using the @see argument:

{{{
 /// @see RemovePerInstanceObject
 /// @see GetPerInstanceObject
}}}

The previous example produces a “See also:” reference after the summary of the method. However, if you want only to refer to a method in the comments, use the See tag:

{{{
/// See PPB_Instance.IsFullFrame. 
}}}

=== Code Examples ===

Ideally, you can provide code examples so developers can see how the API is used in the context of code.  In this case, use the `<pre>` or `<code>` html tag so that the resulting HTML is formatted in fixed-width font.  Example:

{{{
/// The browser will ask the Module object to create a new Instance
/// for each occurrence of the <embed> tag that has these attributes:
/// <pre>
///     type="application/x-ppapi-nacl-srpc"
///     nexes="ARM: hello_world_arm.nexe
///            x86-32: hello_world_x86_32.nexe
///            x86-64: hello_world_x86_64.nexe"
/// </pre>
}}}