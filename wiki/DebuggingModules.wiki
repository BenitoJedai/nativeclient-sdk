#summary Instructions for debugging examples
#labels Featured

This page shows you how to inspect an SDK example using the GDB debugger on Mac or Linux.

*Note:* Windows does not yet have support for debugging.

<ol>
<li>
Before you start debugging, do everything in GettingStarted, including:
  * Make sure your version of Google Chrome can run Native Client examples
  * Download and unarchive the SDK
  * Build the SDK examples
  * Have an HTTP server, and use it to load one of the examples that you built
</li>

<li> 
Build the development version of the SDK examples.
<blockquote> <pre>make develop</pre> </blockquote>
</li>

<li>
In the platform-specific plugin directory, create a link to the development version of the Hello World sample. On Mac, the plugin directory is `~/Library/Internet Plug-Ins`.  On Linux, it's `~/.mozilla/plugins`.

<dl>
<dt> Mac example: </dt>
<dd>
<pre> cd ~/Library/Internet\ Plug-Ins/
ln -s /nacl-sdk/native_client_sdk_0_1_199_0/examples/develop/mac_x86/hello_world.plugin .</pre>
</dd>

<dt> Linux example: </dt>
<dd>
<pre> cd ~/.mozilla/plugins
ln -s /nacl-sdk/native_client_sdk_0_1_199_0/examples/develop/linux_x86/libhello_world.so .</pre>

</dd>
</dl>

*Note:* Don't forget the '.' at the end of the `ln` command line.
</li>

<li>
Quit Google Chrome.
</li>

<li>
Launch GDB, specifying the executable file for Google Chrome.

<dl>
<dt> Mac example: </dt>
<dd>
<pre>gdb /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome</pre>
</dd>

<dt> Linux example: </dt>
<dd>
<pre>gdb /opt/google/chrome</pre>
</dd>
</dl>


</li>

<li>
In GDB, start the browser with the following flags: *--enable-nacl --single-process --internal-pepper*. For now on Mac, add *--no-sandbox*.

Linux:
<blockquote><pre>r --enable-nacl --single-process --internal-pepper</pre></blockquote>

Mac:
<blockquote><pre>r --enable-nacl --single-process --internal-pepper --no-sandbox</pre></blockquote>
</li>

<li>
Interrupt the browser by pressing Ctl+C in GDB.
</li>

<li>
Set a breakpoint. For example:

<blockquote>
<pre> break hello_world.cc:67
or
break InvokeDefault</pre></blockquote>
</li>

<li>
Answer *y* to the question "Make breakpoint pending on future shared library load? (y or n)".
</li>

<li>
In the browser, instead of going to http://.../publish/.../hello_world.html as you did in GettingStarted, change *publish* to *develop* and add *#develop* to the end of the URL. For example:

     http://localhost:5103/develop/mac_x86/hello_world.html#develop

You should hit the breakpoint.
Now debug to your heart's content.
</li>
</ol>

== More notes ==

To launch gdb with Google Chrome:
<blockquote><pre>gdb /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome</pre>
Or on Linux:
<pre>gdb chrome</pre>
</blockquote>

Some examples of commands you might use:
  * list
  * where 10
  * n
  * p _someVar_
  
Typical output:
<blockquote><pre>
(gdb) n
80          const char *msg = "hello, world.";
(gdb) p msg
$1 = 0x6c6c6568 &lt;Address 0x6c6c6568 out of bounds>
(gdb) n
81          const int msglength = strlen(msg) + 1;
(gdb) p msg
$2 = 0x1849cdc9 "hello, world."
(gdb) </pre></blockquote>

You often need to have breakpoints in one or more of these methods:
  * `NPP_GetValue`
  * `NPP_GetScriptableInstance` - To make sure it's being called at all. This is how the browser gets your plugin object. 
  * `NPP_New`

Possible exercise: In Chrome, look at source code of hello_world.html vs. .../#develop
(.nexe vs. pepper code)

Hello World will run in any browser. The other examples (Pepper 2D, Pepper 3D) require Google Chrome; they won't run in Safari (or whatever).

If you haven't created a link to the example's development version, you can use the *--load-plugin* flag when starting the browser in GDB. Set `--load-plugin` to the absolute path of the file containing the development version of the example, which you can find under `examples/develop/your_platform`. 

<dl>
<dt> Mac example: </dt>
<dd>
<pre>r --enable-nacl --single-process --internal-pepper \
 --load-plugin=/Users/me/Downloads/native_client_sdk_0_1_0_0/examples/develop/mac_x86/hello_world.plugin</pre></dd>

<dt> Linux example: </dt>
<dd>
<pre>r --enable-nacl --single-process --internal-pepper \
 --load-plugin=/usr/me/native_client_sdk_0_1_0_0/examples/develop/linux_x86/libhello_world.so</pre>
</dd>
</dl>

== API notes {PENDING: move these elsewhere} ==
Pepper APIs are documented here:
https://wiki.mozilla.org/Plugins:PlatformIndependentNPAPI

Plugin development documented here:
https://developer.mozilla.org/en/Gecko_Plugin_API_Reference

.nexe files have NPAPI baked in. They also use NPRuntime (a subset of NPAPI that lets you call C++ from !JavaScript). Pepper is an extension of NPAPI.

The Native Client implementation of NPAPI is built on top of SRPC. (You could use SRPC directly, but most people wouldn't.)