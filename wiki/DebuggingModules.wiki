#summary Instructions for debugging examples
#labels Featured

Here are rough notes to help you debug SDK examples. {Note: These instructions feature Chromium. By the time this project is available externally, they'll feature Dev channel Google Chrome instead.}

<ol>

<li>
Before you start debugging, do everything in GettingStarted, including:
  * Make sure your version of Chromium can run Native Client examples
  * Download and unarchive the SDK
  * Build the SDK examples using `make` or `make develop`
  * Have an HTTP server, and use it to load one of the examples that you built
</li>

<li>
Quit Chromium.
</li>

<li>
Launch GDB, specifying the executable file for Chromium. For example:

<blockquote>
<pre>gdb /Users/me/Downloads/chrome-mac/Chromium.app/Contents/MacOS/Chromium</pre>
Or on Linux:
<pre>gdb chrome</pre></blockquote>
</li>

<li>
In GDB, start the browser with the same flags as before, plus *--single-process*, *--internal-pepper*, and *--load-plugin*. Set `--load-plugin` to the absolute path of the file containing the development version of the example, which you can find under `examples/develop/your_platform`. For example:

<blockquote>
<pre>r --enable-nacl --no-sandbox --single-process --internal-pepper --load-plugin=/Users/me/Downloads/native_client_sdk_0_1_0_0/examples/develop/mac_x86/hello_world.plugin</pre>
Or on Linux:
<pre>r --enable-nacl --single-process --internal-pepper --load-plugin=/usr/me/native_client_sdk_0_1_0_0/examples/develop/linux_x86/libhello_world.so</pre>
</blockquote>
</li>

<li>
Interrupt the browser by pressing Ctl+C in GDB.
</li>

<li>
Set a breakpoint. For example:

<blockquote>
<pre> break hello_world.cc:75
or
break InvokeHW</pre></blockquote>
</li>

<li>
Answer *y* to the question "Make breakpoint pending on future shared library load? (y or n)".
</li>

<li>
In the browser, instead of going to http://.../publish/.../hello_world.html as you did in GettingStarted, change *publish* to *develop* and add *#develop* to the end of the URL. For example:

     http://localhost:5103/develop/mac_x86/hello_world.html#develop

You should hit the breakpoint.
Now debug to your heart's content.
</li>
</ol>

== More notes ==

To launch gdb with Google Chrome:
<blockquote><pre>gdb /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome</pre>
Or on Linux:
<pre>gdb chrome</pre>
</blockquote>

Some examples of commands you might use:
  * list
  * where 10
  * n
  * p _someVar_
  
Typical output:
<blockquote><pre>
(gdb) n
80          const char *msg = "hello, world.";
(gdb) p msg
$1 = 0x6c6c6568 &lt;Address 0x6c6c6568 out of bounds>
(gdb) n
81          const int msglength = strlen(msg) + 1;
(gdb) p msg
$2 = 0x1849cdc9 "hello, world."
(gdb) </pre></blockquote>

You often need to have breakpoints in one or more of these methods:
  * `NPP_GetValue`
  * `NPP_GetScriptableInstance` - To make sure it's being called at all. This is how the browser gets your plugin object. 
  * `NPP_New`

Possible exercise: In Chrome, look at source code of hello_world.html vs. .../#develop
(.nexe vs. pepper code)

Hello World will run in any browser. The other examples (Pepper 2D, Pepper 3D) require Google Chrome; they won't run in Safari (or whatever).

Note: If you prefer, on Windows and Mac, you can make symbolic links to the development versions of the examples.   If you do, you will not need to use the --load-plugin= flag when debugging.  There is a special directory on each platform: on Mac it's `~/Library/Internet\ Plug-Ins'; on Linux it's `~/.mozilla/plugins'.  To make the necessary symbolic links, cd into the directory for your platform and use `ln -s develop_moduel_path .'  (note the final '.'). For example:
<blockquote>
On Mac:
<pre> cd ~/Library/Internet\ Plug-Ins
ln -s ~/Downloads/native_client_sdk_0_1_0_0/examples/develop/mac_x86/hello_world.plugin .</pre>
On Linux:
<pre> cd ~/.mozilla/plugins
ln -s ~/Downloads/native_client_sdk_0_1_0_0/examples/develop/linux_x86/libhello_world.so .</pre>
</blockquote>
Once you have established these symbolic links, you can re-compile the examples.  Any changes you made to the code will take effect ocne you hit the Reload button on the browser.

You use the same URL as before when loading the development version of the example (remember to add the trailing #debug).

== API notes {PENDING: move these elsewhere} ==
Pepper APIs are documented here:
https://wiki.mozilla.org/Plugins:PlatformIndependentNPAPI

Plugin development documented here:
https://developer.mozilla.org/en/Gecko_Plugin_API_Reference

.nexe files have NPAPI baked in. They also use NPRuntime (a subset of NPAPI that lets you call C++ from !JavaScript). Pepper is an extension of NPAPI.

The Native Client implementation of NPAPI is built on top of SRPC. (You could use SRPC directly, but most people wouldn't.)