#summary Instructions for building and running examples
#labels Featured

This page tells you how to use the Native Client SDK to build and run a Native Client module. {PENDING: This page is preliminary. We plan to split it up into one page per platform. Please send other suggestions for improvement to kathyw.}

<wiki:toc />

= Before you start =

A few platform notes:

  * Although you can use a 64-bit Windows or Linux system, the browser itself must be 32-bit software. {PENDING: once you've installed, how do you know whether you have 32- or 64-bit chrome?}
  * ...

A few terminology notes:

  * The term _.nexe_ refers to a publishable, platform-independent executable file for a Native Client module.
  * To debug your Native Client module, you need to make a _development_ version of it, as opposed to a _publishable_ version of it.

= Getting the software =

To build and run Native Client modules,
you need to get the Native Client SDK
and the right version of the browser.

<ol>
<li> Download the SDK for your platform.

  http://build.chromium.org/buildbot/nacl_archive/nacl_new_sdk/

</li>

<li> Unarchive the SDK. You can probably just double-click the archive file. If you prefer to use the command line, try something like this:

<blockquote>
<pre>tar xvf naclsdk_mac.tgz</pre></blockquote>
</li>

<li> If there are any spaces in the path to the SDK, remove them. {TBD: make sure this is necessary; give examples}
</li>

<li> Download and unarchive a Chromium build from http://build.chromium.org/buildbot/continuous/. The following builds have been confirmed to work {PENDING: We need to update these links and confirm this procedure. We also need to determine whether we'll support dev or beta channel.}:

  * [http://build.chromium.org/buildbot/continuous/mac/2010-04-02/43509/chrome-mac.zip 43509] (Mac)
  * ... (Windows)
  * [http://build.chromium.org/buildbot/continuous/linux/2010-04-14/44475/chrome-linux.zip 44475] (Linux; if you have a 64-bit machine, see https://bugs.launchpad.net/ubuntu/+source/ia32-libs/+bug/253430 for help in running a 32-bit browser)
</li>

</ol>

= Building and running the SDK examples =

Before you can run any of the examples in the SDK, you need to build them.
Then you need to start Google Chrome with the `--enable-nacl` command-line flag,
and use an HTTP URL to load an example's page.
The SDK makes all of this easy,
as long as you tell the SDK where to find your copy of Google Chrome 5 Beta 3.

<ol>

<li>
In the examples directory of the SDK,
create a symbolic link in this directory to the executable file for Google Chrome Version 5 Beta 3.
Call the link `chrome`.
{PENDING: These directions have been confirmed only on Linux.}

<blockquote>
<pre> cd native_client_sdk_0_1_0_0/examples
ln -s /home/me/nacl/chrome-linux/chrome chrome </pre></blockquote>
</li>

<li> Invoke `make run_hello_world` from the `examples` directory of the SDK to build and run the Hello World example:

<blockquote>
<pre>make run_hello_world</pre></blockquote>

This step creates publishable and development versions of the Hello World example,
placing the results under `publish` and `develop` directories, respectively. It then starts up an HTTP server and Google Chrome, and brings up the Hello World example's page (at the URL http://localhost:5103/publish/linux_x86/hello_world.html).

{PENDING: Describe what they should see. Troubleshoot common issues. Refer to the [https://groups.google.com/group/native-client-discuss native-client-discuss group]. Until this is external, just email the nacl team to see if someone else has had the same problem.}
</li>

<li> Look at and interact with the page.

  * Look at the *Status* heading. If you see SUCCESS, then the example is working. If not, try reloading the page. If you still don't see SUCCESS — for example, if it says the Client modules are loading too slowly — the example might still be OK.
  * Click the *Call fortytwo()* button. <br /> A dialog should come up, saying that the page says: *42*
  * Click the *Call helloworld()* button. <br /> A dialog should come up, saying that the page says: *hello, world.*

</li>

</ol>

= What to do next =

  * Try `make run_pi_generator` to run the Pi Generator example, which uses the Pepper 2D API. {PENDING: this works for me on Linux. I navigated directly to http://localhost:5103/publish/linux_x86/pi_generator.html without using make.}
  * Try `make run_tumbler` to run the Tumbler example, which uses the Pepper 3D API. {PENDING: this isn't working for me on Linux. I navigated directly to http://localhost:5103/publish/linux_x86/tumbler.html without using make, fwiw.}
  * See DebuggingModules
  * See WritingModules

{PENDING: Other pages that might be useful: OldReadMe, OldGs}