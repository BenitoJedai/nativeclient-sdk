#summary Instructions for building and running examples
#labels Featured

This page tells you how to use the Native Client SDK to build and run a .nexe file (untrusted native code module).

<wiki:toc />

= Before you start =

{PENDING: discuss platform requirements here.
So far, these instructions have been tested on Mac only.}

= Getting the software =

To build and run .nexe files,
you need to get the SDK
and make sure you have the right version of Google Chrome.

<ol>
<li> Download the SDK for your platform. You can find it here:

  http://build.chromium.org/buildbot/snapshots/nacl_new_sdk/

</li>

<li> Bring up the *About Google Chrome* dialog, and make sure you're running the Dev channel version of Google Chrome. On the Mac, the menu item that brings up this dialog under the Chrome menu; on Linux and Windows, it's under the Tools (wrench) menu.
</li>

<li> If you aren't using the Dev channel, switch to it by following the instructions on this page:

  http://dev.chromium.org/getting-involved/dev-channel
  
{JUST KIDDING: The Dev channel doesn't currently work with Native Client. Instead, you can download the latest version of Chromium from http://build.chromium.org/buildbot/continuous/}
</li>
</ol>

= Running pre-built examples =

Your first step is to make sure that
you can run Native Client modules that are already on the web.

<ol>
<li> Run Google Chrome with these flags:
`--no-sandbox --internal-nacl --internal-pepper --enable-gpu-plugin`

For example, to run Google Chrome on a Mac from the command line:

<blockquote>
<pre>/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --no-sandbox --internal-nacl --internal-pepper --enable-gpu-plugin</pre></blockquote>

{To run Chromium on a Mac from the command line:

<blockquote>
<pre>/Users/me/Downloads/chrome-mac/Chromium.app/Contents/MacOS/Chromium --no-sandbox --internal-nacl --internal-pepper --enable-gpu-plugin</pre></blockquote> }

</li>

<li>
Visit {some URL to a page that runs a .nexe}.
If you see SUCCESS under the Status heading,
then you've successfully executed the hello world example.
If not, 
{PENDING: Troubleshoot common issues.}

If you still can't run that example, look at the [https://groups.google.com/group/native-client-discuss native-client-discuss group] to see if someone else has had the same problem.
</li>

</ol>

Once you've successfully run a .nexe from the web,
you're ready to build and run examples in the SDK.

= Building and running the SDK examples =

Before you can run any of the examples in the SDK, you need to build them.
Then you need to use an HTTP URL
to load an example's page.

<ol>
<li> Build the examples, using the following command:

  <pre>cd examples; make</pre>

This step creates release and debug versions of the SDK examples,
placing the results under `release` and `debug` directories, respectively.
</li>

<li> Run Google Chrome with the same flags as before. </li>

<li>
If you don't already have an HTTP server running,
start one up
so that you can get to the examples' built files using HTTP.
If you want to use the one that's included in the SDK
go to the `example` directory and execute `python httpd.py`.
</li>

<li>
Load the npapi_helloworld example
from `examples/release/<em>your_platform</em>/npapi_helloworld.html`.
(Be sure not to forget `scons-out`!)
For example, if you're using a Mac and
the HTTP server that's included in the SDK,
use this URL:

  http://localhost:5103/release/mac_x86-32/npapi_helloworld.html

If you see SUCCESS under the Status heading,
then you've successfully built and executed the hello world example.
Woohoo!
</li>
</ol>

= What to do next =

See DebuggingModules and WritingModules.

= Move me =

{PENDING: put the stuff in this section somewhere (not in this page?).}

== Make ==

<p>
Here are some of the most useful Make targets:
</p>

|| *Command* || *Description* ||
|| `make clean` || Clean everything ||
|| `make` || Build everything ||
|| `make release` || Build the release version of your module (.nexe) ||
|| `make debug` || Build the debug version ||

== MIME types ==
A note about MIME types:
  * Trusted NPAPI plugins must have a MIME type that begins with 'pepper-'.
  * Native Client modules must have a MIME type that is exactly 'application/x-nacl-srpc'.

The HTML files bundles with the examples show how
to specify a different MIME type for the embedded object when you are debugging
a trusted NPAPI plugin versus running an untrusted module.

Be sure to set the MIME
type of your trusted plugin to match the MIME type in the HTML. (On the Mac,
this means the Info.plist has to have one WebPluginMIMETypes entry.)