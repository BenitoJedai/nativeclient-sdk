#summary Instructions for building and running examples
#labels Featured

<hr>
<h1>Wait a minute!</h1>

We're revising the SDK and instructions, based on tester feedback. If you can wait to try out the SDK, please check back tomorrow to see whether we've removed this warning.

<hr>

This page tells you how to use the Native Client SDK to build and run a Native Client module. {PENDING: This page is preliminary. We plan to split it up into one page per platform.}

<wiki:toc />

= Before you start =

A few terminology notes:

  * The term _.nexe_ refers to a publishable, platform-independent executable file for a Native Client module.
  * To debug your Native Client module, you need to make a _development_ version of it, as opposed to a _publishable_ version of it.
 * This page uses _Chromium_ to refer to the most recent browser builds provided by the open-source project behind Google Chrome

A few platform notes:

  * ...

= Getting the software =

To build and run Native Client modules,
you need to get the Native Client SDK
and the right version of the browser.

<ol>
<li> Download the SDK for your platform: 

    [http://build.chromium.org/buildbot/nacl_archive/nacl_new_sdk/naclsdk_win.exe Windows SDK] | [http://build.chromium.org/buildbot/nacl_archive/nacl_new_sdk/naclsdk_mac.tgz Mac SDK] | [http://build.chromium.org/buildbot/nacl_archive/nacl_new_sdk/naclsdk_linux.tgz Linux SDK]

</li>

<li> Extract the SDK's files.

<dl>
<dt> Windows: </dt>
<dd> Run the self-extracting archive:
<blockquote>
<pre>naclsdk_win.exe</pre>
</blockquote>
</dd>

<dt> Mac or Linux: </dt>
<dd> Use the `tar` command:
<blockquote>
<pre>tar xvf naclsdk_mac.tgz</pre>
</blockquote>
</dd>
</dl>

<p> <b>Important:</b>
Make sure there are no spaces in the path to the SDK. For example, the path `C:\Documents and Settings\kathyw\My Documents\nacl-sdk` is bad; you can't successfully build examples under that directory. Instead, you could put the SDK under `C:\nacl-sdk`. 
</p>
</li>

<li> Download and unarchive a Chromium build from http://build.chromium.org/buildbot/continuous/. The following builds have been confirmed to work:
  * {PENDING: Currently testing [http://build.chromium.org/buildbot/continuous/win/2010-04-14/44475/chrome-win32.zip 44475] and [http://build.chromium.org/buildbot/continuous/win/2010-04-19/44948/chrome-win32.zip 44948]; about to test [http://build.chromium.org/buildbot/continuous/win/2010-04-23/45444/chrome-win32.zip 45444]} (Windows)
  * [http://build.chromium.org/buildbot/continuous/mac/2010-04-14/44474/chrome-mac.zip 44474] {PENDING: about to test [http://build.chromium.org/buildbot/continuous/mac/2010-04-23/45445/chrome-mac.zip 45445]} (Mac)
  * [http://build.chromium.org/buildbot/continuous/linux/2010-04-14/44475/chrome-linux.zip 44475] {PENDING: about to test [http://build.chromium.org/buildbot/continuous/linux/2010-04-23/45444/chrome-linux.zip 45444]} (Linux; if you have a 64-bit machine, see https://bugs.launchpad.net/ubuntu/+source/ia32-libs/+bug/253430 for help on using a 32-bit browser)
</li>

</ol>

= Building and running the SDK examples =

Before you can run any of the examples in the SDK, you need to build them.
Then you need to start Chromium with the `--enable-nacl` command-line flag,
and use an HTTP URL to load an example's page.
{PENDING: Point to page(s) with details on doing this all by hand.}
The SDK has a run script that automates all of this.

<ol>

<li>
Make sure the SDK can find your copy of Chromium.
The easiest thing to do is to have the executable in the standard place for your platform:
<dl>

<dt> Windows: </dt>
<dd> By default, the run script looks for Chromium in the "standard" application location, which depends on your version of Windows.  For example, Windows 7 looks for Chromium in %USERPROFILE%\AppData\Local\Chromium\Application. </dd>
<dt> Mac: </dt>
<dd> `/Applications/Chromium.app`</dd>

<dt> Linux:</dt>
<dd> `/opt/google/chromium`
</dd>
</dl>

Alternatively, you can specify the location of Chromium
using the *--chrome-path* option in the next step.
</li>

<li> From the `examples` directory of the SDK, use the `run.py` script to build and run the Hello World example:

<blockquote>
<pre>python run.py</pre></blockquote>

This step creates publishable versions of all the SDK examples,
placing the results under the `publish` directory. It then starts up an HTTP server and Chromium, and brings up the Hello World example's page.

If everything works, you see a bunch of output as the examples build.
Then a Chromium window opens,
displaying a page that has a URL starting with http://localhost:5103/publish (for example, http://localhost:5103/publish/mac_x86/hello_world.html).

*Troubleshooting:* If everything appears to compile successfully but the browser doesn't start,
try using *--chrome-path* to specify the location of the Chromium executable file.
Example:
<blockquote><pre>python run.py --chrome-path="C:\nacl-test\chromium-44948\chrome-win32"</pre></blockquote>

{PENDING: More troubleshooting should go here, plus a reference to where feedback and additional info are.}
</li>

<li> Look at and interact with the page.

  * Look at the *Status* heading. If you see SUCCESS, then the example is working. If not, try reloading the page. If you still don't see SUCCESS — for example, if it says the Client modules are loading too slowly — the example might still be OK.
  * Click the *Call fortytwo()* button. <br /> A dialog should come up, saying that the page says: *42*
  * Click the *Call helloworld()* button. <br /> A dialog should come up, saying that the page says: *hello, world.*

{PENDING: More troubleshooting should go here.}

</li>

</ol>

= What to do next =

  * Try `python run.py --example=pi_generator` to run the Pi Generator example, which uses the Pepper 2D API. {PENDING: This works on Linux and Mac, at least. Instead of running the script, you can instead just change `hello_world.html` to `pi_generator.html`.}
  * Try `python run.py --example=tumbler` to run the Tumbler example, which uses the Pepper 3D API. {PENDING: Tumbler isn't working for me on Linux; it worked after one reload on Mac. Instead of running the script, you can instead change the filename to `tumbler.html`.}
  * If you're using Mac or Linux, try DebuggingModules
  * See WritingModules

Notes:
  * Google Chrome version 5.0.375.9 on the Mac still requires a --no-sandbox flag
  * Other pages that might be useful: OldReadMe, OldGs

If you're using Google Chrome (not Chromium) and a 64-bit Linux machine:
  * You must use the *32-bit* version of the browser.  To do so, after downloading the <tt>google-chrome-unstable_current_i386.deb</tt> file, you will need to type in
    * <tt>sudo apt-get remove google-chrome-beta # if you have a 64-bit version of chrome installed </tt>
    * <tt>sudo dpkg --force-architecture -i google-chrome-unstable_current_i386.deb</tt>