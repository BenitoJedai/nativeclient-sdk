#summary Instructions for building and running examples
#labels Featured

This page tells you how to use the Native Client SDK to build and run a Native Client module. {PENDING: This page is preliminary. We plan to split it up into one page per platform.}

<wiki:toc />

= Before you start =

A few terminology notes:

  * The term _.nexe_ refers to a publishable, platform-independent executable file for a Native Client module.
  * To debug your Native Client module, you need to make a _development_ version of it, as opposed to a _publishable_ version of it.
  * This page uses _Chromium_ to refer to the most recent browser builds provided by the open-source project behind Google Chrome

= Getting the software =

To build and run Native Client modules,
you need to get the Native Client SDK
and the right version of the browser.
You might also need Python.

<ol>
<li> Download the SDK for your platform: 

    [http://build.chromium.org/buildbot/nacl_archive/nacl_new_sdk/naclsdk_win.exe Windows SDK] | [http://build.chromium.org/buildbot/nacl_archive/nacl_new_sdk/naclsdk_mac.tgz Mac SDK] | [http://build.chromium.org/buildbot/nacl_archive/nacl_new_sdk/naclsdk_linux.tgz Linux SDK]

</li>

<li> Extract the SDK's files.

<blockquote>
*Windows:* Run the self-extracting archive.
<code>naclsdk_win.exe</code>

*Mac or Linux:* Use the `tar` command.
<code>tar xvf naclsdk_mac.tgz</code>
</blockquote>

<p> <b>Important:</b>
Make sure there are *no spaces* in the path to the SDK. For example, the path `C:\Documents and Settings\me\My Documents\nacl-sdk` is bad; you can't successfully build examples under that directory. Instead, you could put the SDK under `C:\nacl-sdk`. 
</p>
</li>

<li> Download and unarchive a Chromium build from http://build.chromium.org/buildbot/continuous/. The following builds have been confirmed to work:
  * [http://build.chromium.org/buildbot/continuous/win/2010-04-23/45444/chrome-win32.zip 45444] (Windows)
  * [http://build.chromium.org/buildbot/continuous/mac/2010-04-23/45445/chrome-mac.zip 45445] (Mac)
  * [http://build.chromium.org/buildbot/continuous/linux/2010-04-23/45444/chrome-linux.zip 45444] (Linux; if you have a 64-bit machine, see https://bugs.launchpad.net/ubuntu/+source/ia32-libs/+bug/253430 for help on using a 32-bit browser)
</li>

<li> Make sure you have Python (version 2.4, 2.5, or 2.6). Here's how to check your Python version:

<code>python -V</code>

If you don't have Python, download it. You can get it for free from http://www.python.org/download/.
</li>

</ol>

= Running the SDK examples =

Pre-built versions of the examples are under the SDK's `examples/publish` directory. For example, the 32-bit x86 .nexes are in `examples/publish/x86_32`. To run an example in the SDK, you need to do three things:

  # Launch Chromium with the `--enable-nacl` flag
  # Start a web server that can serve the pages under `examples/publish`
  # Visit the example's URL in Chromium

Here are the details.

<ol>
<li>Launch Chromium with the `--enable-nacl` flag. Consider also using the <a href="http://www.chromium.org/developers/creating-and-using-profiles">`--user-data-dir` flag</a>, which will protect your normal browser cache from your Native Client development. To launch Chromium with these flags set, either you can run it from a command line or you can set up a platform-specific shortcut or alias.

<blockquote>
*Windows:*
<code>chrome-win32\chrome --enable-nacl --user-data-dir=%USERPROFILE%\nacl-chrome-profile</code>

*Mac:*
<code>Chromium/Contents/MacOS/Chromium --enable-nacl --user-data-dir=$HOME/nacl-chrome-profile</code>

*Linux:*
<code>chromium/chrome --enable-nacl --user-data-dir=$HOME/nacl-chrome-profile</code>
</blockquote>
</li>

<li>Start a web server that can serve the contents of `publish` in the `examples` directory.  A simple python-based HTTP server is provided with the SDK, in the `examples` directory:<br />
<code> cd examples
python httpd.py 5103</code>
This starts a local server on port 5103.

<p>
*Note:* Later, if you want to shut down this server, navigate to the following URL: http://localhost:5103/?quit=1
</p>
</li>

<li>Visit the URL corresponding to the example you want to run.
You can find the HTML files for the examples under the `examples/publish/{platform}` directory. For example, if you use the SDK's simple HTTP server on a 32-bit x86 computer: <br /><br />

  * `http://localhost:5103/publish/x86_32/hello_world.html`
  * `http://localhost:5103/publish/x86_32/pi_generator.html`
  * `http://localhost:5103/publish/x86_32/tumbler.html`
</li>

</ol>
== What to expect ==

=== Hello World ===
  * Look at the *Status* heading. If you see SUCCESS, then the example is working. If not, try reloading the page. If you still don't see SUCCESS — for example, if it says the Client modules are loading too slowly — the example might still be OK.
  * Click the *Call fortytwo()* button. <br /> A dialog should come up, saying that the page says: *42*
  * Click the *Call helloworld()* button. <br /> A dialog should come up, saying that the page says: *hello, world.*

=== Pi Generator ===
  * A text box should appear and start printing values of pi.
  * A partially red square with an inscribed blue quarter-circle should appear.  Black speckles are painted on the square, these represent Monte Carlo points.
  * The example stops by itself after iterating for a while.

=== Tumbler ===
  * A magenta square should appear.  This is the front face of a 3D cube.
  * You can use the mouse to tumble the cube.  Click and drag over the cube and see what happens!

{PENDING: More troubleshooting should go here.}


= What to do next =

  * Try building the examples yourself.  Each one comes with a Makefile. For example to build the Hello World example:<br /><code>cd hello_world ; make publish</code>
  * If you're using Mac or Linux, try DebuggingModules
  
  * See WritingModules

= Notes =

Other pages that might be useful: OldReadMe, OldGs

If you're using Google Chrome (not Chromium) and a 64-bit Linux machine:
  * You must use the *32-bit* version of the browser.  To do so, after downloading the <tt>google-chrome-unstable_current_i386.deb</tt> file, you will need to type in:
  <code>sudo apt-get remove google-chrome-beta # if you have a 64-bit version of chrome installed
sudo dpkg --force-architecture -i google-chrome-unstable_current_i386.deb</code>
  * Some Linux computers do not have drivers for hardware-accelerated 3D graphics installed.  These *must* be installed in order for the Tumbler example to work.  To find out if you are using the software renderer, try running `glxinfo` and look for the Mesa driver.  If it is running, then you need to install a driver that does hardware acceleration.