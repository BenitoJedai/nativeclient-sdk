#summary Instructions for building and running examples
#labels Featured

This page tells you how to use the Native Client SDK to build and run a Native Client module. {PENDING: This page is preliminary. We plan to split it up into one page per platform.}

<wiki:toc />

= Before you start =

A few terminology notes:

  * The term _.nexe_ refers to a publishable, platform-independent executable file for a Native Client module.
  * To debug your Native Client module, you need to make a _development_ version of it, as opposed to a _publishable_ version of it.

A few platform notes:

  * ...

= Getting the software =

To build and run Native Client modules,
you need to get the Native Client SDK
and the right version of the browser.

<ol>
<li> Download the SDK for your platform: 

    [http://build.chromium.org/buildbot/nacl_archive/nacl_new_sdk/naclsdk_win.exe Windows SDK] | [http://build.chromium.org/buildbot/nacl_archive/nacl_new_sdk/naclsdk_mac.tgz Mac SDK] | [http://build.chromium.org/buildbot/nacl_archive/nacl_new_sdk/naclsdk_linux.tgz Linux SDK]

</li>

<li> Extract the SDK's files.

<dl>
<dt> Windows: </dt>
<dd> Run the self-extracting archive:
<blockquote>
<pre>naclsdk_win.exe</pre>
</blockquote>
</dd>

<dt> Mac or Linux: </dt>
<dd> Use the `tar` command:
<blockquote>
<pre>tar xvf naclsdk_mac.tgz</pre>
</blockquote>
</dd>
</dl>

<p> <b>Important:</b>
Make sure there are no spaces in the path to the SDK. For example, the path `C:\Documents and Settings\kathyw\My Documents\nacl-sdk` is bad; you can't successfully build examples under that directory. Instead, you could put the SDK under `C:\nacl-sdk`. 
</p>
</li>

<li> If you don't already have the Dev-channel version of the Google Chrome browser, get it:

    http://dev.chromium.org/getting-involved/dev-channel
 
Notes:

  * If you already have the Dev channel, the About Google Chrome box will have "dev" after the version number.
  * On *64-bit Linux*, you must use the *32-bit* version of the browser.

</li>

</ol>

= Building and running the SDK examples =

Before you can run any of the examples in the SDK, you need to build them.
Then you need to start Google Chrome with the `--enable-nacl` command-line flag,
and use an HTTP URL to load an example's page.
The SDK has a run script that automates all of this.

<ol>

<li>
Make sure the SDK can find your copy of Google Chrome.
The easiest thing to do is to have the executable in the standard place for your platform:
<dl>

<dt> Windows: </dt>
<dd> The "standard" application location, which depends on your version of Windows.  For example, Windows 7 looks for `chrome.exe` in `%USERPROFILE%\AppData\Local\Google\Chrome\Application`. </dd>

<dt> Mac: </dt>
<dd> `/Applications/Google Chrome.app`</dd>

<dt> Linux:</dt>
<dd> `/opt/google/chrome`
</dd>
</dl>

</li>

<li>
Quit Google Chrome, if it's already running.
{PENDING: We should use --user-data-dir so this isn't necessary.}
</li>

<li> From the `examples` directory of the SDK, use the `run.py` script to build and run the Hello World example:

<blockquote>
<pre>python run.py</pre></blockquote>

This step creates publishable versions of all the SDK examples,
placing the results under the `publish` directory. It then starts up an HTTP server and Google Chrome, and brings up the Hello World example's page.

If everything works, you see a bunch of output as the examples build.
Then a Google Chrome window opens,
displaying a page that has a URL starting with http://localhost:5103/publish (for example, http://localhost:5103/publish/mac_x86/hello_world.html).

*Troubleshooting:* If everything appears to compile successfully but the browser doesn't start,
try using *--chrome-path* to specify the location of the Google Chrome executable file.
Example:
<blockquote><pre>python run.py --chrome-path="C:\Path\To\Directory That Has chrome.exe"</pre></blockquote>

{PENDING: More troubleshooting should go here, plus a reference to where feedback and additional info are.}
</li>

<li> Look at and interact with the page.

  * Look at the *Status* heading. If you see SUCCESS, then the example is working. If not, try reloading the page. If you still don't see SUCCESS — for example, if it says the Client modules are loading too slowly — the example might still be OK.
  * Click the *Call fortytwo()* button. <br /> A dialog should come up, saying that the page says: *42*
  * Click the *Call helloworld()* button. <br /> A dialog should come up, saying that the page says: *hello, world.*

{PENDING: More troubleshooting should go here.}

</li>

</ol>

= What to do next =

  * Try `python run.py --example=pi_generator` to run the Pi Generator example, which uses the Pepper 2D API. {PENDING: This works on Linux and Mac, at least. Instead of running the script, you can instead just change `hello_world.html` to `pi_generator.html`.}
  * Try `python run.py --example=tumbler` to run the Tumbler example, which uses the Pepper 3D API. {PENDING: Tumbler isn't working for me on Linux; it worked after one reload on Mac. Instead of running the script, you can instead change the filename to `tumbler.html`.}
  * If you're using Mac or Linux, try DebuggingModules
  * See WritingModules

Notes:
  * Google Chrome version 5.0.375.9 on the Mac still requires a --no-sandbox flag
  * Other pages that might be useful: OldReadMe, OldGs