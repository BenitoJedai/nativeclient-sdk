#summary Instructions for building and running examples
#labels Featured

This page tells you how to use the Native Client SDK to build and run a Native Client module. {PENDING: This page is preliminary. We plan to split it up into one page per platform. Please send other suggestions for improvement to kathyw.}

<wiki:toc />

= Before you start =

A few platform notes:

  * ...

A few terminology notes:

  * The term _.nexe_ refers to a publishable, platform-independent executable file for a Native Client module.
  * To debug your Native Client module, you need to make a _development_ version of it, as opposed to a _publishable_ version of it.
  * This page uses _Chromium_ to refer to the most recent browser builds provided by the open-source project behind Google Chrome. 

= Getting the software =

To build and run Native Client modules,
you need to get the Native Client SDK
and the right version of the browser.

<ol>
<li> Download the SDK for your platform: 

    [http://build.chromium.org/buildbot/nacl_archive/nacl_new_sdk/naclsdk_win.exe Windows SDK] | [http://build.chromium.org/buildbot/nacl_archive/nacl_new_sdk/naclsdk_mac.tgz Mac SDK] | [http://build.chromium.org/buildbot/nacl_archive/nacl_new_sdk/naclsdk_linux.tgz Linux SDK]

</li>

<li> Extract the SDK's files.

  * On Windows, run the self-extracting zip:
<blockquote>
<pre>naclsdk_win.exe</pre>
</blockquote>

  * On Mac or Linux, you can use the `tar` command:
<blockquote>
<pre>tar xvf naclsdk_mac.tgz</pre>
</blockquote>

<p> <b>Important:</b>
Make sure there are no spaces in the path to the SDK. For example, the path `C:\Documents and Settings\kathyw\My Documents\nacl-sdk` is bad; you can't successfully build examples under that directory. Instead, you could put the SDK under `C:\nacl-sdk`. 
</p>
</li>

<li> Download and unarchive a Chromium build from http://build.chromium.org/buildbot/continuous/. The following builds have been confirmed to work {PENDING: We need to update these links and confirm this procedure.}:

  * [http://build.chromium.org/buildbot/continuous/mac/2010-04-02/43509/chrome-mac.zip 43509] {PENDING: Currently testing [http://build.chromium.org/buildbot/continuous/mac/2010-04-14/44474/chrome-mac.zip 44474]} (Mac)
  * ... {PENDING: Currently testing [http://build.chromium.org/buildbot/continuous/win/2010-04-14/44475/chrome-win32.zip 44475]; [http://build.chromium.org/buildbot/continuous/win/2010-04-14/44475/mini_installer.exe mini-installer] isn't working for me} (Windows)
  * [http://build.chromium.org/buildbot/continuous/linux/2010-04-14/44475/chrome-linux.zip 44475] (Linux; if you have a 64-bit machine, see https://bugs.launchpad.net/ubuntu/+source/ia32-libs/+bug/253430 for help on using a 32-bit browser)
</li>

</ol>

= Building and running the SDK examples =

Before you can run any of the examples in the SDK, you need to build them.
Then you need to start Chromium with the `--enable-nacl` command-line flag,
and use an HTTP URL to load an example's page.
The SDK makes all of this easy,
as long as you tell the SDK where to find your copy of Chromium.

<ol>

<li>
Make sure the SDK can find your copy of Chromium.
<dl>
<dt> Linux:</dt>
<dd> By default, the run script looks for Google Chrome in `/opt/google/chrome`.  The easiest thing to do is copy your downloaded version there.
</dd>

<dt> Mac: </dt>
<dd> Put `Chromium.app` under /Applications. For example:
<blockquote>
<pre>mv ~/Downloads/chrome-mac/Chromium.app /Applications
</pre></blockquote>
</dd>

<dt> Windows: </dt>
<dd> By default, the run script looks for Google Chrome in `c:\AppData\Local\Chromium\Application`. </dd>
</dl>
</li>

<li> Invoke `run.py` script from the `examples` directory of the SDK to build and run the Hello World example:

<blockquote>
<pre>python run.py</pre></blockquote>

This step creates publishable versions of the Hello World example,
placing the results under the `publish`directory. It then starts up an HTTP server and Chromium, and brings up the Hello World example's page (for example, at the URL http://localhost:5103/publish/linux_x86/hello_world.html).

{PENDING: Describe what they should see. Troubleshoot common issues. Refer to the [https://groups.google.com/group/native-client-discuss native-client-discuss group]. Until this is external, just email the nacl team to see if someone else has had the same problem.}
</li>

<li> Look at and interact with the page.

  * Look at the *Status* heading. If you see SUCCESS, then the example is working. If not, try reloading the page. If you still don't see SUCCESS — for example, if it says the Client modules are loading too slowly — the example might still be OK.
  * Click the *Call fortytwo()* button. <br /> A dialog should come up, saying that the page says: *42*
  * Click the *Call helloworld()* button. <br /> A dialog should come up, saying that the page says: *hello, world.*

</li>

</ol>

= What to do next =

  * Try `python run.py --example=pi_generator` to run the Pi Generator example, which uses the Pepper 2D API. {PENDING: This works on Linux and Mac, at least. Instead of running make, you can instead just navigate directly to http://localhost:5103/publish/linux_x86/pi_generator.html.}
  * Try `python run.py --example=tumbler ` to run the Tumbler example, which uses the Pepper 3D API. {PENDING: this isn't working for me on Linux; it worked after one reload on Mac. I navigated directly to http://localhost:5103/publish/linux_x86/tumbler.html without using make.}
  * See DebuggingModules
  * See WritingModules

{PENDING: Other pages that might be useful: OldReadMe, OldGs}

{PENDING: Note that you can't currently use Native Client with 64-bit browsers.}