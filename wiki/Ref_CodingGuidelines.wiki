#summary The C++ and JavaScript guidelines for the SDK.

= !NaCl SDK Coding Guidelines =

This document describes coding guidelines that are specific to the !NaCl SDK project.  Naturally, we rely on the Google style guides for most issues, but when we want to be consistent in an area that those guides don’t cover, we will put those project-specific guidelines here.

== Code Review Rules & API Documentation ==

If you write a header file that contains developer-facing API (for example, `src/c_salt/notification_center.h`), then your code *must* include [Ref_DoxygenComments Doxygen-style comments].  You cannot receive a final LGTM until your documentation has been reviewed for consistency and content.  

== C++ Guidelines ==

Extends:  [http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml Google C++ Style Guide].

=== Typedefs of `shared_ptr` should be named with a prefix of `Shared` ===

For example:
{{{
  typedef std::tr1::shared_ptr<Foo> SharedFoo;
}}}

=== !NaCl header files should be treated as system libraries, and included using `<>`. ===

!NaCl SDK files, NPAPI headers, PPAPI headers, and other non-system libraries should be included using `“”`.
Rationale:  !NaCl is part of our platform and is therefore treated similarly to Unix headers, and so !NaCl headers are included via `<>`.  Quotes would work as well, but we think that keeping a clean separation between system includes and project includes will improve readability.

=== General Naming Conventions ===
==== Memory management ====
  * Methods with `Copy` or `Create` in their names return an allocated object.  The caller is responsible for deleting the returned object.
  * Methods with `Get` in their names return a raw pointer, and you can't be certain of the returned object's life span.  To ensure the persistence of the object you can copy it.
  * `const` accessors return a `shared_ptr` to non-intrinsic types.  The ref counting is done for you by the `shared_ptr` mechanism.

==== Collections ====
  * `Add` means "add if absent, do nothing if present"
  * `Set` means "replace if present, add if absent"
  * `Replace` means "replace if present, do nothing if absent"
  * `Remove` means "remove is present, do nothing is absent"

==== Parameters ====
  * Any by-reference parameters that are meant to be filled in with a return value can be NULL.  This means the caller is not interested in that return value.
  * Template parameter names follow [http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Type_Names Google type name conventions], also known as !CamelCase.

== !JavaScript Guidelines ==

[http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml Google JavaScript Style Guide]
 